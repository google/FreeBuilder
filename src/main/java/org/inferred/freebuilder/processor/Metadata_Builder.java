// Autogenerated code. Do not modify.
package org.inferred.freebuilder.processor;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import java.util.stream.BaseStream;
import javax.annotation.Generated;
import org.inferred.freebuilder.processor.util.Excerpt;
import org.inferred.freebuilder.processor.util.ParameterizedType;
import org.inferred.freebuilder.processor.util.QualifiedName;

/**
 * Auto-generated superclass of {@link Metadata.Builder}, derived from the API of {@link Metadata}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class Metadata_Builder {

  /** Creates a new builder using {@code value} as a template. */
  public static Metadata.Builder from(Metadata value) {
    return new Metadata.Builder().mergeFrom(value);
  }

  private enum Property {
    TYPE("type"),
    INTERFACE_TYPE("interfaceType"),
    EXTENSIBLE("extensible"),
    GENERATED_BUILDER("generatedBuilder"),
    VALUE_TYPE("valueType"),
    PARTIAL_TYPE("partialType"),
    PROPERTY_ENUM("propertyEnum"),
    BUILDER_SERIALIZABLE("builderSerializable"),
    HAS_TO_BUILDER_METHOD("hasToBuilderMethod"),
    VALUE_TYPE_VISIBILITY("valueTypeVisibility"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private ParameterizedType type;
  private boolean interfaceType;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private ParameterizedType optionalBuilder = null;
  private boolean extensible;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private BuilderFactory builderFactory = null;
  private ParameterizedType generatedBuilder;
  private ParameterizedType valueType;
  private ParameterizedType partialType;
  private Set<QualifiedName> visibleNestedTypes = ImmutableSet.of();
  private ParameterizedType propertyEnum;
  private List<Metadata.Property> properties = ImmutableList.of();
  private final LinkedHashMap<Metadata.StandardMethod, Metadata.UnderrideLevel>
      standardMethodUnderrides = new LinkedHashMap<>();
  private boolean builderSerializable;
  private boolean hasToBuilderMethod;
  private List<Excerpt> generatedBuilderAnnotations = ImmutableList.of();
  private List<Excerpt> valueTypeAnnotations = ImmutableList.of();
  private Metadata.Visibility valueTypeVisibility;
  private List<Function<Metadata, Excerpt>> nestedClasses = ImmutableList.of();
  private final EnumSet<Metadata_Builder.Property> _unsetProperties =
      EnumSet.allOf(Metadata_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link Metadata#getType()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code type} is null
   */
  public Metadata.Builder setType(ParameterizedType type) {
    this.type = Objects.requireNonNull(type);
    _unsetProperties.remove(Metadata_Builder.Property.TYPE);
    return (Metadata.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link Metadata#getType()} by applying {@code mapper} to
   * it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public Metadata.Builder mapType(UnaryOperator<ParameterizedType> mapper) {
    Objects.requireNonNull(mapper);
    return setType(mapper.apply(getType()));
  }

  /**
   * Returns the value that will be returned by {@link Metadata#getType()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public ParameterizedType getType() {
    Preconditions.checkState(
        !_unsetProperties.contains(Metadata_Builder.Property.TYPE), "type not set");
    return type;
  }

  /**
   * Sets the value to be returned by {@link Metadata#isInterfaceType()}.
   *
   * @return this {@code Builder} object
   */
  public Metadata.Builder setInterfaceType(boolean interfaceType) {
    this.interfaceType = interfaceType;
    _unsetProperties.remove(Metadata_Builder.Property.INTERFACE_TYPE);
    return (Metadata.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link Metadata#isInterfaceType()} by applying {@code
   * mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public Metadata.Builder mapInterfaceType(UnaryOperator<Boolean> mapper) {
    Objects.requireNonNull(mapper);
    return setInterfaceType(mapper.apply(isInterfaceType()));
  }

  /**
   * Returns the value that will be returned by {@link Metadata#isInterfaceType()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public boolean isInterfaceType() {
    Preconditions.checkState(
        !_unsetProperties.contains(Metadata_Builder.Property.INTERFACE_TYPE),
        "interfaceType not set");
    return interfaceType;
  }

  /**
   * Sets the value to be returned by {@link Metadata#getOptionalBuilder()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code optionalBuilder} is null
   */
  public Metadata.Builder setOptionalBuilder(ParameterizedType optionalBuilder) {
    this.optionalBuilder = Objects.requireNonNull(optionalBuilder);
    return (Metadata.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link Metadata#getOptionalBuilder()}.
   *
   * @return this {@code Builder} object
   */
  public Metadata.Builder setOptionalBuilder(
      Optional<? extends ParameterizedType> optionalBuilder) {
    if (optionalBuilder.isPresent()) {
      return setOptionalBuilder(optionalBuilder.get());
    } else {
      return clearOptionalBuilder();
    }
  }

  /**
   * Sets the value to be returned by {@link Metadata#getOptionalBuilder()}.
   *
   * @return this {@code Builder} object
   */
  public Metadata.Builder setNullableOptionalBuilder(ParameterizedType optionalBuilder) {
    if (optionalBuilder != null) {
      return setOptionalBuilder(optionalBuilder);
    } else {
      return clearOptionalBuilder();
    }
  }

  /**
   * If the value to be returned by {@link Metadata#getOptionalBuilder()} is present, replaces it by
   * applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public Metadata.Builder mapOptionalBuilder(UnaryOperator<ParameterizedType> mapper) {
    return setOptionalBuilder(getOptionalBuilder().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link Metadata#getOptionalBuilder()} to {@link
   * Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public Metadata.Builder clearOptionalBuilder() {
    optionalBuilder = null;
    return (Metadata.Builder) this;
  }

  /** Returns the value that will be returned by {@link Metadata#getOptionalBuilder()}. */
  public Optional<ParameterizedType> getOptionalBuilder() {
    return Optional.ofNullable(optionalBuilder);
  }

  /**
   * Sets the value to be returned by {@link Metadata#isExtensible()}.
   *
   * @return this {@code Builder} object
   */
  public Metadata.Builder setExtensible(boolean extensible) {
    this.extensible = extensible;
    _unsetProperties.remove(Metadata_Builder.Property.EXTENSIBLE);
    return (Metadata.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link Metadata#isExtensible()} by applying {@code mapper}
   * to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public Metadata.Builder mapExtensible(UnaryOperator<Boolean> mapper) {
    Objects.requireNonNull(mapper);
    return setExtensible(mapper.apply(isExtensible()));
  }

  /**
   * Returns the value that will be returned by {@link Metadata#isExtensible()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public boolean isExtensible() {
    Preconditions.checkState(
        !_unsetProperties.contains(Metadata_Builder.Property.EXTENSIBLE), "extensible not set");
    return extensible;
  }

  /**
   * Sets the value to be returned by {@link Metadata#getBuilderFactory()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code builderFactory} is null
   */
  public Metadata.Builder setBuilderFactory(BuilderFactory builderFactory) {
    this.builderFactory = Objects.requireNonNull(builderFactory);
    return (Metadata.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link Metadata#getBuilderFactory()}.
   *
   * @return this {@code Builder} object
   */
  public Metadata.Builder setBuilderFactory(Optional<? extends BuilderFactory> builderFactory) {
    if (builderFactory.isPresent()) {
      return setBuilderFactory(builderFactory.get());
    } else {
      return clearBuilderFactory();
    }
  }

  /**
   * Sets the value to be returned by {@link Metadata#getBuilderFactory()}.
   *
   * @return this {@code Builder} object
   */
  public Metadata.Builder setNullableBuilderFactory(BuilderFactory builderFactory) {
    if (builderFactory != null) {
      return setBuilderFactory(builderFactory);
    } else {
      return clearBuilderFactory();
    }
  }

  /**
   * If the value to be returned by {@link Metadata#getBuilderFactory()} is present, replaces it by
   * applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public Metadata.Builder mapBuilderFactory(UnaryOperator<BuilderFactory> mapper) {
    return setBuilderFactory(getBuilderFactory().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link Metadata#getBuilderFactory()} to {@link
   * Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public Metadata.Builder clearBuilderFactory() {
    builderFactory = null;
    return (Metadata.Builder) this;
  }

  /** Returns the value that will be returned by {@link Metadata#getBuilderFactory()}. */
  public Optional<BuilderFactory> getBuilderFactory() {
    return Optional.ofNullable(builderFactory);
  }

  /**
   * Sets the value to be returned by {@link Metadata#getGeneratedBuilder()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code generatedBuilder} is null
   */
  public Metadata.Builder setGeneratedBuilder(ParameterizedType generatedBuilder) {
    this.generatedBuilder = Objects.requireNonNull(generatedBuilder);
    _unsetProperties.remove(Metadata_Builder.Property.GENERATED_BUILDER);
    return (Metadata.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link Metadata#getGeneratedBuilder()} by applying {@code
   * mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public Metadata.Builder mapGeneratedBuilder(UnaryOperator<ParameterizedType> mapper) {
    Objects.requireNonNull(mapper);
    return setGeneratedBuilder(mapper.apply(getGeneratedBuilder()));
  }

  /**
   * Returns the value that will be returned by {@link Metadata#getGeneratedBuilder()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public ParameterizedType getGeneratedBuilder() {
    Preconditions.checkState(
        !_unsetProperties.contains(Metadata_Builder.Property.GENERATED_BUILDER),
        "generatedBuilder not set");
    return generatedBuilder;
  }

  /**
   * Sets the value to be returned by {@link Metadata#getValueType()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code valueType} is null
   */
  public Metadata.Builder setValueType(ParameterizedType valueType) {
    this.valueType = Objects.requireNonNull(valueType);
    _unsetProperties.remove(Metadata_Builder.Property.VALUE_TYPE);
    return (Metadata.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link Metadata#getValueType()} by applying {@code mapper}
   * to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public Metadata.Builder mapValueType(UnaryOperator<ParameterizedType> mapper) {
    Objects.requireNonNull(mapper);
    return setValueType(mapper.apply(getValueType()));
  }

  /**
   * Returns the value that will be returned by {@link Metadata#getValueType()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public ParameterizedType getValueType() {
    Preconditions.checkState(
        !_unsetProperties.contains(Metadata_Builder.Property.VALUE_TYPE), "valueType not set");
    return valueType;
  }

  /**
   * Sets the value to be returned by {@link Metadata#getPartialType()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code partialType} is null
   */
  public Metadata.Builder setPartialType(ParameterizedType partialType) {
    this.partialType = Objects.requireNonNull(partialType);
    _unsetProperties.remove(Metadata_Builder.Property.PARTIAL_TYPE);
    return (Metadata.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link Metadata#getPartialType()} by applying {@code
   * mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public Metadata.Builder mapPartialType(UnaryOperator<ParameterizedType> mapper) {
    Objects.requireNonNull(mapper);
    return setPartialType(mapper.apply(getPartialType()));
  }

  /**
   * Returns the value that will be returned by {@link Metadata#getPartialType()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public ParameterizedType getPartialType() {
    Preconditions.checkState(
        !_unsetProperties.contains(Metadata_Builder.Property.PARTIAL_TYPE), "partialType not set");
    return partialType;
  }

  /**
   * Adds {@code element} to the set to be returned from {@link Metadata#getVisibleNestedTypes()}.
   * If the set already contains {@code element}, then {@code addVisibleNestedTypes} has no effect
   * (only the previously added element is retained).
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public Metadata.Builder addVisibleNestedTypes(QualifiedName element) {
    if (visibleNestedTypes instanceof ImmutableSet) {
      visibleNestedTypes = new LinkedHashSet<>(visibleNestedTypes);
    }
    visibleNestedTypes.add(Objects.requireNonNull(element));
    return (Metadata.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the set to be returned from {@link
   * Metadata#getVisibleNestedTypes()}, ignoring duplicate elements (only the first duplicate
   * element is added).
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public Metadata.Builder addVisibleNestedTypes(QualifiedName... elements) {
    return addAllVisibleNestedTypes(Arrays.asList(elements));
  }

  /**
   * Adds each element of {@code elements} to the set to be returned from {@link
   * Metadata#getVisibleNestedTypes()}, ignoring duplicate elements (only the first duplicate
   * element is added).
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public Metadata.Builder addAllVisibleNestedTypes(Spliterator<? extends QualifiedName> elements) {
    elements.forEachRemaining(this::addVisibleNestedTypes);
    return (Metadata.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the set to be returned from {@link
   * Metadata#getVisibleNestedTypes()}, ignoring duplicate elements (only the first duplicate
   * element is added).
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public Metadata.Builder addAllVisibleNestedTypes(
      BaseStream<? extends QualifiedName, ?> elements) {
    return addAllVisibleNestedTypes(elements.spliterator());
  }

  /**
   * Adds each element of {@code elements} to the set to be returned from {@link
   * Metadata#getVisibleNestedTypes()}, ignoring duplicate elements (only the first duplicate
   * element is added).
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public Metadata.Builder addAllVisibleNestedTypes(Iterable<? extends QualifiedName> elements) {
    elements.forEach(this::addVisibleNestedTypes);
    return (Metadata.Builder) this;
  }

  /**
   * Removes {@code element} from the set to be returned from {@link
   * Metadata#getVisibleNestedTypes()}. Does nothing if {@code element} is not a member of the set.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public Metadata.Builder removeVisibleNestedTypes(QualifiedName element) {
    if (visibleNestedTypes instanceof ImmutableSet) {
      visibleNestedTypes = new LinkedHashSet<>(visibleNestedTypes);
    }
    visibleNestedTypes.remove(Objects.requireNonNull(element));
    return (Metadata.Builder) this;
  }

  /**
   * Applies {@code mutator} to the set to be returned from {@link
   * Metadata#getVisibleNestedTypes()}.
   *
   * <p>This method mutates the set in-place. {@code mutator} is a void consumer, so any value
   * returned from a lambda will be ignored. Take care not to call pure functions, like {@link
   * Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public Metadata.Builder mutateVisibleNestedTypes(Consumer<? super Set<QualifiedName>> mutator) {
    if (visibleNestedTypes instanceof ImmutableSet) {
      visibleNestedTypes = new LinkedHashSet<>(visibleNestedTypes);
    }
    // If addVisibleNestedTypes is overridden, this method will be updated to delegate to it
    mutator.accept(visibleNestedTypes);
    return (Metadata.Builder) this;
  }

  /**
   * Clears the set to be returned from {@link Metadata#getVisibleNestedTypes()}.
   *
   * @return this {@code Builder} object
   */
  public Metadata.Builder clearVisibleNestedTypes() {
    if (visibleNestedTypes instanceof ImmutableSet) {
      visibleNestedTypes = ImmutableSet.of();
    } else {
      visibleNestedTypes.clear();
    }
    return (Metadata.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the set that will be returned by {@link
   * Metadata#getVisibleNestedTypes()}. Changes to this builder will be reflected in the view.
   */
  public Set<QualifiedName> getVisibleNestedTypes() {
    if (visibleNestedTypes instanceof ImmutableSet) {
      visibleNestedTypes = new LinkedHashSet<>(visibleNestedTypes);
    }
    return Collections.unmodifiableSet(visibleNestedTypes);
  }

  /**
   * Sets the value to be returned by {@link Metadata#getPropertyEnum()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code propertyEnum} is null
   */
  public Metadata.Builder setPropertyEnum(ParameterizedType propertyEnum) {
    this.propertyEnum = Objects.requireNonNull(propertyEnum);
    _unsetProperties.remove(Metadata_Builder.Property.PROPERTY_ENUM);
    return (Metadata.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link Metadata#getPropertyEnum()} by applying {@code
   * mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public Metadata.Builder mapPropertyEnum(UnaryOperator<ParameterizedType> mapper) {
    Objects.requireNonNull(mapper);
    return setPropertyEnum(mapper.apply(getPropertyEnum()));
  }

  /**
   * Returns the value that will be returned by {@link Metadata#getPropertyEnum()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public ParameterizedType getPropertyEnum() {
    Preconditions.checkState(
        !_unsetProperties.contains(Metadata_Builder.Property.PROPERTY_ENUM),
        "propertyEnum not set");
    return propertyEnum;
  }

  /**
   * Adds {@code element} to the list to be returned from {@link Metadata#getProperties()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public Metadata.Builder addProperties(Metadata.Property element) {
    if (properties instanceof ImmutableList) {
      properties = new ArrayList<>(properties);
    }
    properties.add(Objects.requireNonNull(element));
    return (Metadata.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from {@link
   * Metadata#getProperties()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public Metadata.Builder addProperties(Metadata.Property... elements) {
    return addAllProperties(Arrays.asList(elements));
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from {@link
   * Metadata#getProperties()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public Metadata.Builder addAllProperties(Spliterator<? extends Metadata.Property> elements) {
    if ((elements.characteristics() & Spliterator.SIZED) != 0) {
      long elementsSize = elements.estimateSize();
      if (elementsSize > 0 && elementsSize <= Integer.MAX_VALUE) {
        if (properties instanceof ImmutableList) {
          properties = new ArrayList<>(properties);
        }
        ((ArrayList<?>) properties).ensureCapacity(properties.size() + (int) elementsSize);
      }
    }
    elements.forEachRemaining(this::addProperties);
    return (Metadata.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from {@link
   * Metadata#getProperties()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public Metadata.Builder addAllProperties(BaseStream<? extends Metadata.Property, ?> elements) {
    return addAllProperties(elements.spliterator());
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from {@link
   * Metadata#getProperties()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public Metadata.Builder addAllProperties(Iterable<? extends Metadata.Property> elements) {
    return addAllProperties(elements.spliterator());
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link Metadata#getProperties()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void consumer, so any value
   * returned from a lambda will be ignored. Take care not to call pure functions, like {@link
   * Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public Metadata.Builder mutateProperties(Consumer<? super List<Metadata.Property>> mutator) {
    if (properties instanceof ImmutableList) {
      properties = new ArrayList<>(properties);
    }
    // If addProperties is overridden, this method will be updated to delegate to it
    mutator.accept(properties);
    return (Metadata.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link Metadata#getProperties()}.
   *
   * @return this {@code Builder} object
   */
  public Metadata.Builder clearProperties() {
    if (properties instanceof ImmutableList) {
      properties = ImmutableList.of();
    } else {
      properties.clear();
    }
    return (Metadata.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by {@link
   * Metadata#getProperties()}. Changes to this builder will be reflected in the view.
   */
  public List<Metadata.Property> getProperties() {
    if (properties instanceof ImmutableList) {
      properties = new ArrayList<>(properties);
    }
    return Collections.unmodifiableList(properties);
  }

  /**
   * Associates {@code key} with {@code value} in the map to be returned from {@link
   * Metadata#getStandardMethodUnderrides()}. If the map previously contained a mapping for the key,
   * the old value is replaced by the specified value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if either {@code key} or {@code value} are null
   */
  public Metadata.Builder putStandardMethodUnderrides(
      Metadata.StandardMethod key, Metadata.UnderrideLevel value) {
    Objects.requireNonNull(key);
    Objects.requireNonNull(value);
    standardMethodUnderrides.put(key, value);
    return (Metadata.Builder) this;
  }

  /**
   * Copies all of the mappings from {@code map} to the map to be returned from {@link
   * Metadata#getStandardMethodUnderrides()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code map} is null or contains a null key or value
   */
  public Metadata.Builder putAllStandardMethodUnderrides(
      Map<? extends Metadata.StandardMethod, ? extends Metadata.UnderrideLevel> map) {
    for (Map.Entry<? extends Metadata.StandardMethod, ? extends Metadata.UnderrideLevel> entry :
        map.entrySet()) {
      putStandardMethodUnderrides(entry.getKey(), entry.getValue());
    }
    return (Metadata.Builder) this;
  }

  /**
   * Removes the mapping for {@code key} from the map to be returned from {@link
   * Metadata#getStandardMethodUnderrides()}, if one is present.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code key} is null
   */
  public Metadata.Builder removeStandardMethodUnderrides(Metadata.StandardMethod key) {
    Objects.requireNonNull(key);
    standardMethodUnderrides.remove(key);
    return (Metadata.Builder) this;
  }

  /**
   * Invokes {@code mutator} with the map to be returned from {@link
   * Metadata#getStandardMethodUnderrides()}.
   *
   * <p>This method mutates the map in-place. {@code mutator} is a void consumer, so any value
   * returned from a lambda will be ignored. Take care not to call pure functions, like {@link
   * Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public Metadata.Builder mutateStandardMethodUnderrides(
      Consumer<? super Map<Metadata.StandardMethod, Metadata.UnderrideLevel>> mutator) {
    // If putStandardMethodUnderrides is overridden, this method will be updated to delegate to it
    mutator.accept(standardMethodUnderrides);
    return (Metadata.Builder) this;
  }

  /**
   * Removes all of the mappings from the map to be returned from {@link
   * Metadata#getStandardMethodUnderrides()}.
   *
   * @return this {@code Builder} object
   */
  public Metadata.Builder clearStandardMethodUnderrides() {
    standardMethodUnderrides.clear();
    return (Metadata.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the map that will be returned by {@link
   * Metadata#getStandardMethodUnderrides()}. Changes to this builder will be reflected in the view.
   */
  public Map<Metadata.StandardMethod, Metadata.UnderrideLevel> getStandardMethodUnderrides() {
    return Collections.unmodifiableMap(standardMethodUnderrides);
  }

  /**
   * Sets the value to be returned by {@link Metadata#isBuilderSerializable()}.
   *
   * @return this {@code Builder} object
   */
  public Metadata.Builder setBuilderSerializable(boolean builderSerializable) {
    this.builderSerializable = builderSerializable;
    _unsetProperties.remove(Metadata_Builder.Property.BUILDER_SERIALIZABLE);
    return (Metadata.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link Metadata#isBuilderSerializable()} by applying
   * {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public Metadata.Builder mapBuilderSerializable(UnaryOperator<Boolean> mapper) {
    Objects.requireNonNull(mapper);
    return setBuilderSerializable(mapper.apply(isBuilderSerializable()));
  }

  /**
   * Returns the value that will be returned by {@link Metadata#isBuilderSerializable()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public boolean isBuilderSerializable() {
    Preconditions.checkState(
        !_unsetProperties.contains(Metadata_Builder.Property.BUILDER_SERIALIZABLE),
        "builderSerializable not set");
    return builderSerializable;
  }

  /**
   * Sets the value to be returned by {@link Metadata#getHasToBuilderMethod()}.
   *
   * @return this {@code Builder} object
   */
  public Metadata.Builder setHasToBuilderMethod(boolean hasToBuilderMethod) {
    this.hasToBuilderMethod = hasToBuilderMethod;
    _unsetProperties.remove(Metadata_Builder.Property.HAS_TO_BUILDER_METHOD);
    return (Metadata.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link Metadata#getHasToBuilderMethod()} by applying
   * {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public Metadata.Builder mapHasToBuilderMethod(UnaryOperator<Boolean> mapper) {
    Objects.requireNonNull(mapper);
    return setHasToBuilderMethod(mapper.apply(getHasToBuilderMethod()));
  }

  /**
   * Returns the value that will be returned by {@link Metadata#getHasToBuilderMethod()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public boolean getHasToBuilderMethod() {
    Preconditions.checkState(
        !_unsetProperties.contains(Metadata_Builder.Property.HAS_TO_BUILDER_METHOD),
        "hasToBuilderMethod not set");
    return hasToBuilderMethod;
  }

  /**
   * Adds {@code element} to the list to be returned from {@link
   * Metadata#getGeneratedBuilderAnnotations()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public Metadata.Builder addGeneratedBuilderAnnotations(Excerpt element) {
    if (generatedBuilderAnnotations instanceof ImmutableList) {
      generatedBuilderAnnotations = new ArrayList<>(generatedBuilderAnnotations);
    }
    generatedBuilderAnnotations.add(Objects.requireNonNull(element));
    return (Metadata.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from {@link
   * Metadata#getGeneratedBuilderAnnotations()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public Metadata.Builder addGeneratedBuilderAnnotations(Excerpt... elements) {
    return addAllGeneratedBuilderAnnotations(Arrays.asList(elements));
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from {@link
   * Metadata#getGeneratedBuilderAnnotations()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public Metadata.Builder addAllGeneratedBuilderAnnotations(
      Spliterator<? extends Excerpt> elements) {
    if ((elements.characteristics() & Spliterator.SIZED) != 0) {
      long elementsSize = elements.estimateSize();
      if (elementsSize > 0 && elementsSize <= Integer.MAX_VALUE) {
        if (generatedBuilderAnnotations instanceof ImmutableList) {
          generatedBuilderAnnotations = new ArrayList<>(generatedBuilderAnnotations);
        }
        ((ArrayList<?>) generatedBuilderAnnotations)
            .ensureCapacity(generatedBuilderAnnotations.size() + (int) elementsSize);
      }
    }
    elements.forEachRemaining(this::addGeneratedBuilderAnnotations);
    return (Metadata.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from {@link
   * Metadata#getGeneratedBuilderAnnotations()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public Metadata.Builder addAllGeneratedBuilderAnnotations(
      BaseStream<? extends Excerpt, ?> elements) {
    return addAllGeneratedBuilderAnnotations(elements.spliterator());
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from {@link
   * Metadata#getGeneratedBuilderAnnotations()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public Metadata.Builder addAllGeneratedBuilderAnnotations(Iterable<? extends Excerpt> elements) {
    return addAllGeneratedBuilderAnnotations(elements.spliterator());
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link
   * Metadata#getGeneratedBuilderAnnotations()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void consumer, so any value
   * returned from a lambda will be ignored. Take care not to call pure functions, like {@link
   * Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public Metadata.Builder mutateGeneratedBuilderAnnotations(
      Consumer<? super List<Excerpt>> mutator) {
    if (generatedBuilderAnnotations instanceof ImmutableList) {
      generatedBuilderAnnotations = new ArrayList<>(generatedBuilderAnnotations);
    }
    // If addGeneratedBuilderAnnotations is overridden, this method will be updated to delegate to it
    mutator.accept(generatedBuilderAnnotations);
    return (Metadata.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link Metadata#getGeneratedBuilderAnnotations()}.
   *
   * @return this {@code Builder} object
   */
  public Metadata.Builder clearGeneratedBuilderAnnotations() {
    if (generatedBuilderAnnotations instanceof ImmutableList) {
      generatedBuilderAnnotations = ImmutableList.of();
    } else {
      generatedBuilderAnnotations.clear();
    }
    return (Metadata.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by {@link
   * Metadata#getGeneratedBuilderAnnotations()}. Changes to this builder will be reflected in the
   * view.
   */
  public List<Excerpt> getGeneratedBuilderAnnotations() {
    if (generatedBuilderAnnotations instanceof ImmutableList) {
      generatedBuilderAnnotations = new ArrayList<>(generatedBuilderAnnotations);
    }
    return Collections.unmodifiableList(generatedBuilderAnnotations);
  }

  /**
   * Adds {@code element} to the list to be returned from {@link
   * Metadata#getValueTypeAnnotations()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public Metadata.Builder addValueTypeAnnotations(Excerpt element) {
    if (valueTypeAnnotations instanceof ImmutableList) {
      valueTypeAnnotations = new ArrayList<>(valueTypeAnnotations);
    }
    valueTypeAnnotations.add(Objects.requireNonNull(element));
    return (Metadata.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from {@link
   * Metadata#getValueTypeAnnotations()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public Metadata.Builder addValueTypeAnnotations(Excerpt... elements) {
    return addAllValueTypeAnnotations(Arrays.asList(elements));
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from {@link
   * Metadata#getValueTypeAnnotations()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public Metadata.Builder addAllValueTypeAnnotations(Spliterator<? extends Excerpt> elements) {
    if ((elements.characteristics() & Spliterator.SIZED) != 0) {
      long elementsSize = elements.estimateSize();
      if (elementsSize > 0 && elementsSize <= Integer.MAX_VALUE) {
        if (valueTypeAnnotations instanceof ImmutableList) {
          valueTypeAnnotations = new ArrayList<>(valueTypeAnnotations);
        }
        ((ArrayList<?>) valueTypeAnnotations)
            .ensureCapacity(valueTypeAnnotations.size() + (int) elementsSize);
      }
    }
    elements.forEachRemaining(this::addValueTypeAnnotations);
    return (Metadata.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from {@link
   * Metadata#getValueTypeAnnotations()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public Metadata.Builder addAllValueTypeAnnotations(BaseStream<? extends Excerpt, ?> elements) {
    return addAllValueTypeAnnotations(elements.spliterator());
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from {@link
   * Metadata#getValueTypeAnnotations()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public Metadata.Builder addAllValueTypeAnnotations(Iterable<? extends Excerpt> elements) {
    return addAllValueTypeAnnotations(elements.spliterator());
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link
   * Metadata#getValueTypeAnnotations()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void consumer, so any value
   * returned from a lambda will be ignored. Take care not to call pure functions, like {@link
   * Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public Metadata.Builder mutateValueTypeAnnotations(Consumer<? super List<Excerpt>> mutator) {
    if (valueTypeAnnotations instanceof ImmutableList) {
      valueTypeAnnotations = new ArrayList<>(valueTypeAnnotations);
    }
    // If addValueTypeAnnotations is overridden, this method will be updated to delegate to it
    mutator.accept(valueTypeAnnotations);
    return (Metadata.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link Metadata#getValueTypeAnnotations()}.
   *
   * @return this {@code Builder} object
   */
  public Metadata.Builder clearValueTypeAnnotations() {
    if (valueTypeAnnotations instanceof ImmutableList) {
      valueTypeAnnotations = ImmutableList.of();
    } else {
      valueTypeAnnotations.clear();
    }
    return (Metadata.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by {@link
   * Metadata#getValueTypeAnnotations()}. Changes to this builder will be reflected in the view.
   */
  public List<Excerpt> getValueTypeAnnotations() {
    if (valueTypeAnnotations instanceof ImmutableList) {
      valueTypeAnnotations = new ArrayList<>(valueTypeAnnotations);
    }
    return Collections.unmodifiableList(valueTypeAnnotations);
  }

  /**
   * Sets the value to be returned by {@link Metadata#getValueTypeVisibility()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code valueTypeVisibility} is null
   */
  public Metadata.Builder setValueTypeVisibility(Metadata.Visibility valueTypeVisibility) {
    this.valueTypeVisibility = Objects.requireNonNull(valueTypeVisibility);
    _unsetProperties.remove(Metadata_Builder.Property.VALUE_TYPE_VISIBILITY);
    return (Metadata.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link Metadata#getValueTypeVisibility()} by applying
   * {@code mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public Metadata.Builder mapValueTypeVisibility(UnaryOperator<Metadata.Visibility> mapper) {
    Objects.requireNonNull(mapper);
    return setValueTypeVisibility(mapper.apply(getValueTypeVisibility()));
  }

  /**
   * Returns the value that will be returned by {@link Metadata#getValueTypeVisibility()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Metadata.Visibility getValueTypeVisibility() {
    Preconditions.checkState(
        !_unsetProperties.contains(Metadata_Builder.Property.VALUE_TYPE_VISIBILITY),
        "valueTypeVisibility not set");
    return valueTypeVisibility;
  }

  /**
   * Adds {@code element} to the list to be returned from {@link Metadata#getNestedClasses()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public Metadata.Builder addNestedClasses(Function<Metadata, Excerpt> element) {
    if (nestedClasses instanceof ImmutableList) {
      nestedClasses = new ArrayList<>(nestedClasses);
    }
    nestedClasses.add(Objects.requireNonNull(element));
    return (Metadata.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from {@link
   * Metadata#getNestedClasses()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  @SafeVarargs
  @SuppressWarnings({"varargs"})
  public final Metadata.Builder addNestedClasses(Function<Metadata, Excerpt>... elements) {
    return addAllNestedClasses(Arrays.asList(elements));
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from {@link
   * Metadata#getNestedClasses()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public Metadata.Builder addAllNestedClasses(
      Spliterator<? extends Function<Metadata, Excerpt>> elements) {
    if ((elements.characteristics() & Spliterator.SIZED) != 0) {
      long elementsSize = elements.estimateSize();
      if (elementsSize > 0 && elementsSize <= Integer.MAX_VALUE) {
        if (nestedClasses instanceof ImmutableList) {
          nestedClasses = new ArrayList<>(nestedClasses);
        }
        ((ArrayList<?>) nestedClasses).ensureCapacity(nestedClasses.size() + (int) elementsSize);
      }
    }
    elements.forEachRemaining(this::addNestedClasses);
    return (Metadata.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from {@link
   * Metadata#getNestedClasses()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public Metadata.Builder addAllNestedClasses(
      BaseStream<? extends Function<Metadata, Excerpt>, ?> elements) {
    return addAllNestedClasses(elements.spliterator());
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from {@link
   * Metadata#getNestedClasses()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public Metadata.Builder addAllNestedClasses(
      Iterable<? extends Function<Metadata, Excerpt>> elements) {
    return addAllNestedClasses(elements.spliterator());
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link Metadata#getNestedClasses()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void consumer, so any value
   * returned from a lambda will be ignored. Take care not to call pure functions, like {@link
   * Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public Metadata.Builder mutateNestedClasses(
      Consumer<? super List<Function<Metadata, Excerpt>>> mutator) {
    if (nestedClasses instanceof ImmutableList) {
      nestedClasses = new ArrayList<>(nestedClasses);
    }
    // If addNestedClasses is overridden, this method will be updated to delegate to it
    mutator.accept(nestedClasses);
    return (Metadata.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link Metadata#getNestedClasses()}.
   *
   * @return this {@code Builder} object
   */
  public Metadata.Builder clearNestedClasses() {
    if (nestedClasses instanceof ImmutableList) {
      nestedClasses = ImmutableList.of();
    } else {
      nestedClasses.clear();
    }
    return (Metadata.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by {@link
   * Metadata#getNestedClasses()}. Changes to this builder will be reflected in the view.
   */
  public List<Function<Metadata, Excerpt>> getNestedClasses() {
    if (nestedClasses instanceof ImmutableList) {
      nestedClasses = new ArrayList<>(nestedClasses);
    }
    return Collections.unmodifiableList(nestedClasses);
  }

  /** Sets all property values using the given {@code Metadata} as a template. */
  public Metadata.Builder mergeFrom(Metadata value) {
    Metadata_Builder _defaults = new Metadata.Builder();
    if (_defaults._unsetProperties.contains(Metadata_Builder.Property.TYPE)
        || !Objects.equals(value.getType(), _defaults.getType())) {
      setType(value.getType());
    }
    if (_defaults._unsetProperties.contains(Metadata_Builder.Property.INTERFACE_TYPE)
        || value.isInterfaceType() != _defaults.isInterfaceType()) {
      setInterfaceType(value.isInterfaceType());
    }
    value.getOptionalBuilder().ifPresent(this::setOptionalBuilder);
    if (_defaults._unsetProperties.contains(Metadata_Builder.Property.EXTENSIBLE)
        || value.isExtensible() != _defaults.isExtensible()) {
      setExtensible(value.isExtensible());
    }
    value.getBuilderFactory().ifPresent(this::setBuilderFactory);
    if (_defaults._unsetProperties.contains(Metadata_Builder.Property.GENERATED_BUILDER)
        || !Objects.equals(value.getGeneratedBuilder(), _defaults.getGeneratedBuilder())) {
      setGeneratedBuilder(value.getGeneratedBuilder());
    }
    if (_defaults._unsetProperties.contains(Metadata_Builder.Property.VALUE_TYPE)
        || !Objects.equals(value.getValueType(), _defaults.getValueType())) {
      setValueType(value.getValueType());
    }
    if (_defaults._unsetProperties.contains(Metadata_Builder.Property.PARTIAL_TYPE)
        || !Objects.equals(value.getPartialType(), _defaults.getPartialType())) {
      setPartialType(value.getPartialType());
    }
    if (value instanceof Metadata_Builder.Value
        && visibleNestedTypes == ImmutableSet.<QualifiedName>of()) {
      visibleNestedTypes = ImmutableSet.copyOf(value.getVisibleNestedTypes());
    } else {
      addAllVisibleNestedTypes(value.getVisibleNestedTypes());
    }
    if (_defaults._unsetProperties.contains(Metadata_Builder.Property.PROPERTY_ENUM)
        || !Objects.equals(value.getPropertyEnum(), _defaults.getPropertyEnum())) {
      setPropertyEnum(value.getPropertyEnum());
    }
    if (value instanceof Metadata_Builder.Value
        && properties == ImmutableList.<Metadata.Property>of()) {
      properties = ImmutableList.copyOf(value.getProperties());
    } else {
      addAllProperties(value.getProperties());
    }
    putAllStandardMethodUnderrides(value.getStandardMethodUnderrides());
    if (_defaults._unsetProperties.contains(Metadata_Builder.Property.BUILDER_SERIALIZABLE)
        || value.isBuilderSerializable() != _defaults.isBuilderSerializable()) {
      setBuilderSerializable(value.isBuilderSerializable());
    }
    if (_defaults._unsetProperties.contains(Metadata_Builder.Property.HAS_TO_BUILDER_METHOD)
        || value.getHasToBuilderMethod() != _defaults.getHasToBuilderMethod()) {
      setHasToBuilderMethod(value.getHasToBuilderMethod());
    }
    if (value instanceof Metadata_Builder.Value
        && generatedBuilderAnnotations == ImmutableList.<Excerpt>of()) {
      generatedBuilderAnnotations = ImmutableList.copyOf(value.getGeneratedBuilderAnnotations());
    } else {
      addAllGeneratedBuilderAnnotations(value.getGeneratedBuilderAnnotations());
    }
    if (value instanceof Metadata_Builder.Value
        && valueTypeAnnotations == ImmutableList.<Excerpt>of()) {
      valueTypeAnnotations = ImmutableList.copyOf(value.getValueTypeAnnotations());
    } else {
      addAllValueTypeAnnotations(value.getValueTypeAnnotations());
    }
    if (_defaults._unsetProperties.contains(Metadata_Builder.Property.VALUE_TYPE_VISIBILITY)
        || !Objects.equals(value.getValueTypeVisibility(), _defaults.getValueTypeVisibility())) {
      setValueTypeVisibility(value.getValueTypeVisibility());
    }
    if (value instanceof Metadata_Builder.Value
        && nestedClasses == ImmutableList.<Function<Metadata, Excerpt>>of()) {
      nestedClasses = ImmutableList.copyOf(value.getNestedClasses());
    } else {
      addAllNestedClasses(value.getNestedClasses());
    }
    return (Metadata.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}. Does not affect any properties not set on the
   * input.
   */
  public Metadata.Builder mergeFrom(Metadata.Builder template) {
    // Upcast to access private fields; otherwise, oddly, we get an access violation.
    Metadata_Builder base = template;
    Metadata_Builder _defaults = new Metadata.Builder();
    if (!base._unsetProperties.contains(Metadata_Builder.Property.TYPE)
        && (_defaults._unsetProperties.contains(Metadata_Builder.Property.TYPE)
            || !Objects.equals(template.getType(), _defaults.getType()))) {
      setType(template.getType());
    }
    if (!base._unsetProperties.contains(Metadata_Builder.Property.INTERFACE_TYPE)
        && (_defaults._unsetProperties.contains(Metadata_Builder.Property.INTERFACE_TYPE)
            || template.isInterfaceType() != _defaults.isInterfaceType())) {
      setInterfaceType(template.isInterfaceType());
    }
    template.getOptionalBuilder().ifPresent(this::setOptionalBuilder);
    if (!base._unsetProperties.contains(Metadata_Builder.Property.EXTENSIBLE)
        && (_defaults._unsetProperties.contains(Metadata_Builder.Property.EXTENSIBLE)
            || template.isExtensible() != _defaults.isExtensible())) {
      setExtensible(template.isExtensible());
    }
    template.getBuilderFactory().ifPresent(this::setBuilderFactory);
    if (!base._unsetProperties.contains(Metadata_Builder.Property.GENERATED_BUILDER)
        && (_defaults._unsetProperties.contains(Metadata_Builder.Property.GENERATED_BUILDER)
            || !Objects.equals(template.getGeneratedBuilder(), _defaults.getGeneratedBuilder()))) {
      setGeneratedBuilder(template.getGeneratedBuilder());
    }
    if (!base._unsetProperties.contains(Metadata_Builder.Property.VALUE_TYPE)
        && (_defaults._unsetProperties.contains(Metadata_Builder.Property.VALUE_TYPE)
            || !Objects.equals(template.getValueType(), _defaults.getValueType()))) {
      setValueType(template.getValueType());
    }
    if (!base._unsetProperties.contains(Metadata_Builder.Property.PARTIAL_TYPE)
        && (_defaults._unsetProperties.contains(Metadata_Builder.Property.PARTIAL_TYPE)
            || !Objects.equals(template.getPartialType(), _defaults.getPartialType()))) {
      setPartialType(template.getPartialType());
    }
    addAllVisibleNestedTypes(base.visibleNestedTypes);
    if (!base._unsetProperties.contains(Metadata_Builder.Property.PROPERTY_ENUM)
        && (_defaults._unsetProperties.contains(Metadata_Builder.Property.PROPERTY_ENUM)
            || !Objects.equals(template.getPropertyEnum(), _defaults.getPropertyEnum()))) {
      setPropertyEnum(template.getPropertyEnum());
    }
    addAllProperties(base.properties);
    putAllStandardMethodUnderrides(base.standardMethodUnderrides);
    if (!base._unsetProperties.contains(Metadata_Builder.Property.BUILDER_SERIALIZABLE)
        && (_defaults._unsetProperties.contains(Metadata_Builder.Property.BUILDER_SERIALIZABLE)
            || template.isBuilderSerializable() != _defaults.isBuilderSerializable())) {
      setBuilderSerializable(template.isBuilderSerializable());
    }
    if (!base._unsetProperties.contains(Metadata_Builder.Property.HAS_TO_BUILDER_METHOD)
        && (_defaults._unsetProperties.contains(Metadata_Builder.Property.HAS_TO_BUILDER_METHOD)
            || template.getHasToBuilderMethod() != _defaults.getHasToBuilderMethod())) {
      setHasToBuilderMethod(template.getHasToBuilderMethod());
    }
    addAllGeneratedBuilderAnnotations(base.generatedBuilderAnnotations);
    addAllValueTypeAnnotations(base.valueTypeAnnotations);
    if (!base._unsetProperties.contains(Metadata_Builder.Property.VALUE_TYPE_VISIBILITY)
        && (_defaults._unsetProperties.contains(Metadata_Builder.Property.VALUE_TYPE_VISIBILITY)
            || !Objects.equals(
                template.getValueTypeVisibility(), _defaults.getValueTypeVisibility()))) {
      setValueTypeVisibility(template.getValueTypeVisibility());
    }
    addAllNestedClasses(base.nestedClasses);
    return (Metadata.Builder) this;
  }

  /** Resets the state of this builder. */
  public Metadata.Builder clear() {
    Metadata_Builder _defaults = new Metadata.Builder();
    type = _defaults.type;
    interfaceType = _defaults.interfaceType;
    optionalBuilder = _defaults.optionalBuilder;
    extensible = _defaults.extensible;
    builderFactory = _defaults.builderFactory;
    generatedBuilder = _defaults.generatedBuilder;
    valueType = _defaults.valueType;
    partialType = _defaults.partialType;
    clearVisibleNestedTypes();
    propertyEnum = _defaults.propertyEnum;
    clearProperties();
    standardMethodUnderrides.clear();
    builderSerializable = _defaults.builderSerializable;
    hasToBuilderMethod = _defaults.hasToBuilderMethod;
    clearGeneratedBuilderAnnotations();
    clearValueTypeAnnotations();
    valueTypeVisibility = _defaults.valueTypeVisibility;
    clearNestedClasses();
    _unsetProperties.clear();
    _unsetProperties.addAll(_defaults._unsetProperties);
    return (Metadata.Builder) this;
  }

  /**
   * Returns a newly-created {@link Metadata} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public Metadata build() {
    Preconditions.checkState(_unsetProperties.isEmpty(), "Not set: %s", _unsetProperties);
    return new Metadata_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link Metadata} for use in unit tests. State checking will not
   * be performed. Unset properties will throw an {@link UnsupportedOperationException} when
   * accessed via the partial object.
   *
   * <p>Partials should only ever be used in tests. They permit writing robust test cases that won't
   * fail if this type gains more application-level constraints (e.g. new required fields) in
   * future. If you require partially complete values in production code, consider using a Builder.
   */
  @VisibleForTesting()
  public Metadata buildPartial() {
    return new Metadata_Builder.Partial(this);
  }

  private static final class Value implements Metadata {
    private final ParameterizedType type;
    private final boolean interfaceType;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final ParameterizedType optionalBuilder;
    private final boolean extensible;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final BuilderFactory builderFactory;
    private final ParameterizedType generatedBuilder;
    private final ParameterizedType valueType;
    private final ParameterizedType partialType;
    private final ImmutableSet<QualifiedName> visibleNestedTypes;
    private final ParameterizedType propertyEnum;
    private final ImmutableList<Metadata.Property> properties;
    private final ImmutableMap<Metadata.StandardMethod, Metadata.UnderrideLevel>
        standardMethodUnderrides;
    private final boolean builderSerializable;
    private final boolean hasToBuilderMethod;
    private final ImmutableList<Excerpt> generatedBuilderAnnotations;
    private final ImmutableList<Excerpt> valueTypeAnnotations;
    private final Metadata.Visibility valueTypeVisibility;
    private final ImmutableList<Function<Metadata, Excerpt>> nestedClasses;

    private Value(Metadata_Builder builder) {
      this.type = builder.type;
      this.interfaceType = builder.interfaceType;
      this.optionalBuilder = builder.optionalBuilder;
      this.extensible = builder.extensible;
      this.builderFactory = builder.builderFactory;
      this.generatedBuilder = builder.generatedBuilder;
      this.valueType = builder.valueType;
      this.partialType = builder.partialType;
      this.visibleNestedTypes = ImmutableSet.copyOf(builder.visibleNestedTypes);
      this.propertyEnum = builder.propertyEnum;
      this.properties = ImmutableList.copyOf(builder.properties);
      this.standardMethodUnderrides = ImmutableMap.copyOf(builder.standardMethodUnderrides);
      this.builderSerializable = builder.builderSerializable;
      this.hasToBuilderMethod = builder.hasToBuilderMethod;
      this.generatedBuilderAnnotations = ImmutableList.copyOf(builder.generatedBuilderAnnotations);
      this.valueTypeAnnotations = ImmutableList.copyOf(builder.valueTypeAnnotations);
      this.valueTypeVisibility = builder.valueTypeVisibility;
      this.nestedClasses = ImmutableList.copyOf(builder.nestedClasses);
    }

    @Override
    public ParameterizedType getType() {
      return type;
    }

    @Override
    public boolean isInterfaceType() {
      return interfaceType;
    }

    @Override
    public Optional<ParameterizedType> getOptionalBuilder() {
      return Optional.ofNullable(optionalBuilder);
    }

    @Override
    public boolean isExtensible() {
      return extensible;
    }

    @Override
    public Optional<BuilderFactory> getBuilderFactory() {
      return Optional.ofNullable(builderFactory);
    }

    @Override
    public ParameterizedType getGeneratedBuilder() {
      return generatedBuilder;
    }

    @Override
    public ParameterizedType getValueType() {
      return valueType;
    }

    @Override
    public ParameterizedType getPartialType() {
      return partialType;
    }

    @Override
    public ImmutableSet<QualifiedName> getVisibleNestedTypes() {
      return visibleNestedTypes;
    }

    @Override
    public ParameterizedType getPropertyEnum() {
      return propertyEnum;
    }

    @Override
    public ImmutableList<Metadata.Property> getProperties() {
      return properties;
    }

    @Override
    public ImmutableMap<Metadata.StandardMethod, Metadata.UnderrideLevel>
        getStandardMethodUnderrides() {
      return standardMethodUnderrides;
    }

    @Override
    public boolean isBuilderSerializable() {
      return builderSerializable;
    }

    @Override
    public boolean getHasToBuilderMethod() {
      return hasToBuilderMethod;
    }

    @Override
    public ImmutableList<Excerpt> getGeneratedBuilderAnnotations() {
      return generatedBuilderAnnotations;
    }

    @Override
    public ImmutableList<Excerpt> getValueTypeAnnotations() {
      return valueTypeAnnotations;
    }

    @Override
    public Metadata.Visibility getValueTypeVisibility() {
      return valueTypeVisibility;
    }

    @Override
    public ImmutableList<Function<Metadata, Excerpt>> getNestedClasses() {
      return nestedClasses;
    }

    @Override
    public Metadata.Builder toBuilder() {
      return new Metadata.Builder().mergeFrom(this);
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof Metadata_Builder.Value)) {
        return false;
      }
      Metadata_Builder.Value other = (Metadata_Builder.Value) obj;
      return Objects.equals(type, other.type)
          && interfaceType == other.interfaceType
          && Objects.equals(optionalBuilder, other.optionalBuilder)
          && extensible == other.extensible
          && Objects.equals(builderFactory, other.builderFactory)
          && Objects.equals(generatedBuilder, other.generatedBuilder)
          && Objects.equals(valueType, other.valueType)
          && Objects.equals(partialType, other.partialType)
          && Objects.equals(visibleNestedTypes, other.visibleNestedTypes)
          && Objects.equals(propertyEnum, other.propertyEnum)
          && Objects.equals(properties, other.properties)
          && Objects.equals(standardMethodUnderrides, other.standardMethodUnderrides)
          && builderSerializable == other.builderSerializable
          && hasToBuilderMethod == other.hasToBuilderMethod
          && Objects.equals(generatedBuilderAnnotations, other.generatedBuilderAnnotations)
          && Objects.equals(valueTypeAnnotations, other.valueTypeAnnotations)
          && Objects.equals(valueTypeVisibility, other.valueTypeVisibility)
          && Objects.equals(nestedClasses, other.nestedClasses);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          type,
          interfaceType,
          optionalBuilder,
          extensible,
          builderFactory,
          generatedBuilder,
          valueType,
          partialType,
          visibleNestedTypes,
          propertyEnum,
          properties,
          standardMethodUnderrides,
          builderSerializable,
          hasToBuilderMethod,
          generatedBuilderAnnotations,
          valueTypeAnnotations,
          valueTypeVisibility,
          nestedClasses);
    }

    @Override
    public String toString() {
      StringBuilder result =
          new StringBuilder("Metadata{type=")
              .append(type)
              .append(", interfaceType=")
              .append(interfaceType);
      if (optionalBuilder != null) {
        result.append(", optionalBuilder=").append(optionalBuilder);
      }
      result.append(", extensible=").append(extensible);
      if (builderFactory != null) {
        result.append(", builderFactory=").append(builderFactory);
      }
      return result
          .append(", generatedBuilder=")
          .append(generatedBuilder)
          .append(", valueType=")
          .append(valueType)
          .append(", partialType=")
          .append(partialType)
          .append(", visibleNestedTypes=")
          .append(visibleNestedTypes)
          .append(", propertyEnum=")
          .append(propertyEnum)
          .append(", properties=")
          .append(properties)
          .append(", standardMethodUnderrides=")
          .append(standardMethodUnderrides)
          .append(", builderSerializable=")
          .append(builderSerializable)
          .append(", hasToBuilderMethod=")
          .append(hasToBuilderMethod)
          .append(", generatedBuilderAnnotations=")
          .append(generatedBuilderAnnotations)
          .append(", valueTypeAnnotations=")
          .append(valueTypeAnnotations)
          .append(", valueTypeVisibility=")
          .append(valueTypeVisibility)
          .append(", nestedClasses=")
          .append(nestedClasses)
          .append("}")
          .toString();
    }
  }

  private static final class Partial implements Metadata {
    private final ParameterizedType type;
    private final boolean interfaceType;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final ParameterizedType optionalBuilder;
    private final boolean extensible;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final BuilderFactory builderFactory;
    private final ParameterizedType generatedBuilder;
    private final ParameterizedType valueType;
    private final ParameterizedType partialType;
    private final ImmutableSet<QualifiedName> visibleNestedTypes;
    private final ParameterizedType propertyEnum;
    private final ImmutableList<Metadata.Property> properties;
    private final ImmutableMap<Metadata.StandardMethod, Metadata.UnderrideLevel>
        standardMethodUnderrides;
    private final boolean builderSerializable;
    private final boolean hasToBuilderMethod;
    private final ImmutableList<Excerpt> generatedBuilderAnnotations;
    private final ImmutableList<Excerpt> valueTypeAnnotations;
    private final Metadata.Visibility valueTypeVisibility;
    private final ImmutableList<Function<Metadata, Excerpt>> nestedClasses;
    private final EnumSet<Metadata_Builder.Property> _unsetProperties;

    Partial(Metadata_Builder builder) {
      this.type = builder.type;
      this.interfaceType = builder.interfaceType;
      this.optionalBuilder = builder.optionalBuilder;
      this.extensible = builder.extensible;
      this.builderFactory = builder.builderFactory;
      this.generatedBuilder = builder.generatedBuilder;
      this.valueType = builder.valueType;
      this.partialType = builder.partialType;
      this.visibleNestedTypes = ImmutableSet.copyOf(builder.visibleNestedTypes);
      this.propertyEnum = builder.propertyEnum;
      this.properties = ImmutableList.copyOf(builder.properties);
      this.standardMethodUnderrides = ImmutableMap.copyOf(builder.standardMethodUnderrides);
      this.builderSerializable = builder.builderSerializable;
      this.hasToBuilderMethod = builder.hasToBuilderMethod;
      this.generatedBuilderAnnotations = ImmutableList.copyOf(builder.generatedBuilderAnnotations);
      this.valueTypeAnnotations = ImmutableList.copyOf(builder.valueTypeAnnotations);
      this.valueTypeVisibility = builder.valueTypeVisibility;
      this.nestedClasses = ImmutableList.copyOf(builder.nestedClasses);
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    public ParameterizedType getType() {
      if (_unsetProperties.contains(Metadata_Builder.Property.TYPE)) {
        throw new UnsupportedOperationException("type not set");
      }
      return type;
    }

    @Override
    public boolean isInterfaceType() {
      if (_unsetProperties.contains(Metadata_Builder.Property.INTERFACE_TYPE)) {
        throw new UnsupportedOperationException("interfaceType not set");
      }
      return interfaceType;
    }

    @Override
    public Optional<ParameterizedType> getOptionalBuilder() {
      return Optional.ofNullable(optionalBuilder);
    }

    @Override
    public boolean isExtensible() {
      if (_unsetProperties.contains(Metadata_Builder.Property.EXTENSIBLE)) {
        throw new UnsupportedOperationException("extensible not set");
      }
      return extensible;
    }

    @Override
    public Optional<BuilderFactory> getBuilderFactory() {
      return Optional.ofNullable(builderFactory);
    }

    @Override
    public ParameterizedType getGeneratedBuilder() {
      if (_unsetProperties.contains(Metadata_Builder.Property.GENERATED_BUILDER)) {
        throw new UnsupportedOperationException("generatedBuilder not set");
      }
      return generatedBuilder;
    }

    @Override
    public ParameterizedType getValueType() {
      if (_unsetProperties.contains(Metadata_Builder.Property.VALUE_TYPE)) {
        throw new UnsupportedOperationException("valueType not set");
      }
      return valueType;
    }

    @Override
    public ParameterizedType getPartialType() {
      if (_unsetProperties.contains(Metadata_Builder.Property.PARTIAL_TYPE)) {
        throw new UnsupportedOperationException("partialType not set");
      }
      return partialType;
    }

    @Override
    public ImmutableSet<QualifiedName> getVisibleNestedTypes() {
      return visibleNestedTypes;
    }

    @Override
    public ParameterizedType getPropertyEnum() {
      if (_unsetProperties.contains(Metadata_Builder.Property.PROPERTY_ENUM)) {
        throw new UnsupportedOperationException("propertyEnum not set");
      }
      return propertyEnum;
    }

    @Override
    public ImmutableList<Metadata.Property> getProperties() {
      return properties;
    }

    @Override
    public ImmutableMap<Metadata.StandardMethod, Metadata.UnderrideLevel>
        getStandardMethodUnderrides() {
      return standardMethodUnderrides;
    }

    @Override
    public boolean isBuilderSerializable() {
      if (_unsetProperties.contains(Metadata_Builder.Property.BUILDER_SERIALIZABLE)) {
        throw new UnsupportedOperationException("builderSerializable not set");
      }
      return builderSerializable;
    }

    @Override
    public boolean getHasToBuilderMethod() {
      if (_unsetProperties.contains(Metadata_Builder.Property.HAS_TO_BUILDER_METHOD)) {
        throw new UnsupportedOperationException("hasToBuilderMethod not set");
      }
      return hasToBuilderMethod;
    }

    @Override
    public ImmutableList<Excerpt> getGeneratedBuilderAnnotations() {
      return generatedBuilderAnnotations;
    }

    @Override
    public ImmutableList<Excerpt> getValueTypeAnnotations() {
      return valueTypeAnnotations;
    }

    @Override
    public Metadata.Visibility getValueTypeVisibility() {
      if (_unsetProperties.contains(Metadata_Builder.Property.VALUE_TYPE_VISIBILITY)) {
        throw new UnsupportedOperationException("valueTypeVisibility not set");
      }
      return valueTypeVisibility;
    }

    @Override
    public ImmutableList<Function<Metadata, Excerpt>> getNestedClasses() {
      return nestedClasses;
    }

    private static class PartialBuilder extends Metadata.Builder {
      @Override
      public Metadata build() {
        return buildPartial();
      }
    }

    @Override
    public Metadata.Builder toBuilder() {
      Metadata.Builder builder = new PartialBuilder();
      if (!_unsetProperties.contains(Metadata_Builder.Property.TYPE)) {
        builder.setType(type);
      }
      if (!_unsetProperties.contains(Metadata_Builder.Property.INTERFACE_TYPE)) {
        builder.setInterfaceType(interfaceType);
      }
      builder.setNullableOptionalBuilder(optionalBuilder);
      if (!_unsetProperties.contains(Metadata_Builder.Property.EXTENSIBLE)) {
        builder.setExtensible(extensible);
      }
      builder.setNullableBuilderFactory(builderFactory);
      if (!_unsetProperties.contains(Metadata_Builder.Property.GENERATED_BUILDER)) {
        builder.setGeneratedBuilder(generatedBuilder);
      }
      if (!_unsetProperties.contains(Metadata_Builder.Property.VALUE_TYPE)) {
        builder.setValueType(valueType);
      }
      if (!_unsetProperties.contains(Metadata_Builder.Property.PARTIAL_TYPE)) {
        builder.setPartialType(partialType);
      }
      builder.addAllVisibleNestedTypes(visibleNestedTypes);
      if (!_unsetProperties.contains(Metadata_Builder.Property.PROPERTY_ENUM)) {
        builder.setPropertyEnum(propertyEnum);
      }
      builder.addAllProperties(properties);
      builder.putAllStandardMethodUnderrides(standardMethodUnderrides);
      if (!_unsetProperties.contains(Metadata_Builder.Property.BUILDER_SERIALIZABLE)) {
        builder.setBuilderSerializable(builderSerializable);
      }
      if (!_unsetProperties.contains(Metadata_Builder.Property.HAS_TO_BUILDER_METHOD)) {
        builder.setHasToBuilderMethod(hasToBuilderMethod);
      }
      builder.addAllGeneratedBuilderAnnotations(generatedBuilderAnnotations);
      builder.addAllValueTypeAnnotations(valueTypeAnnotations);
      if (!_unsetProperties.contains(Metadata_Builder.Property.VALUE_TYPE_VISIBILITY)) {
        builder.setValueTypeVisibility(valueTypeVisibility);
      }
      builder.addAllNestedClasses(nestedClasses);
      return builder;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof Metadata_Builder.Partial)) {
        return false;
      }
      Metadata_Builder.Partial other = (Metadata_Builder.Partial) obj;
      return Objects.equals(type, other.type)
          && interfaceType == other.interfaceType
          && Objects.equals(optionalBuilder, other.optionalBuilder)
          && extensible == other.extensible
          && Objects.equals(builderFactory, other.builderFactory)
          && Objects.equals(generatedBuilder, other.generatedBuilder)
          && Objects.equals(valueType, other.valueType)
          && Objects.equals(partialType, other.partialType)
          && Objects.equals(visibleNestedTypes, other.visibleNestedTypes)
          && Objects.equals(propertyEnum, other.propertyEnum)
          && Objects.equals(properties, other.properties)
          && Objects.equals(standardMethodUnderrides, other.standardMethodUnderrides)
          && builderSerializable == other.builderSerializable
          && hasToBuilderMethod == other.hasToBuilderMethod
          && Objects.equals(generatedBuilderAnnotations, other.generatedBuilderAnnotations)
          && Objects.equals(valueTypeAnnotations, other.valueTypeAnnotations)
          && Objects.equals(valueTypeVisibility, other.valueTypeVisibility)
          && Objects.equals(nestedClasses, other.nestedClasses)
          && Objects.equals(_unsetProperties, other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          type,
          interfaceType,
          optionalBuilder,
          extensible,
          builderFactory,
          generatedBuilder,
          valueType,
          partialType,
          visibleNestedTypes,
          propertyEnum,
          properties,
          standardMethodUnderrides,
          builderSerializable,
          hasToBuilderMethod,
          generatedBuilderAnnotations,
          valueTypeAnnotations,
          valueTypeVisibility,
          nestedClasses,
          _unsetProperties);
    }

    @Override
    public String toString() {
      StringBuilder result = new StringBuilder("partial Metadata{");
      if (!_unsetProperties.contains(Metadata_Builder.Property.TYPE)) {
        result.append("type=").append(type).append(", ");
      }
      if (!_unsetProperties.contains(Metadata_Builder.Property.INTERFACE_TYPE)) {
        result.append("interfaceType=").append(interfaceType).append(", ");
      }
      if (optionalBuilder != null) {
        result.append("optionalBuilder=").append(optionalBuilder).append(", ");
      }
      if (!_unsetProperties.contains(Metadata_Builder.Property.EXTENSIBLE)) {
        result.append("extensible=").append(extensible).append(", ");
      }
      if (builderFactory != null) {
        result.append("builderFactory=").append(builderFactory).append(", ");
      }
      if (!_unsetProperties.contains(Metadata_Builder.Property.GENERATED_BUILDER)) {
        result.append("generatedBuilder=").append(generatedBuilder).append(", ");
      }
      if (!_unsetProperties.contains(Metadata_Builder.Property.VALUE_TYPE)) {
        result.append("valueType=").append(valueType).append(", ");
      }
      if (!_unsetProperties.contains(Metadata_Builder.Property.PARTIAL_TYPE)) {
        result.append("partialType=").append(partialType).append(", ");
      }
      result.append("visibleNestedTypes=").append(visibleNestedTypes);
      if (!_unsetProperties.contains(Metadata_Builder.Property.PROPERTY_ENUM)) {
        result.append(", propertyEnum=").append(propertyEnum);
      }
      result
          .append(", properties=")
          .append(properties)
          .append(", standardMethodUnderrides=")
          .append(standardMethodUnderrides);
      if (!_unsetProperties.contains(Metadata_Builder.Property.BUILDER_SERIALIZABLE)) {
        result.append(", builderSerializable=").append(builderSerializable);
      }
      if (!_unsetProperties.contains(Metadata_Builder.Property.HAS_TO_BUILDER_METHOD)) {
        result.append(", hasToBuilderMethod=").append(hasToBuilderMethod);
      }
      result
          .append(", generatedBuilderAnnotations=")
          .append(generatedBuilderAnnotations)
          .append(", valueTypeAnnotations=")
          .append(valueTypeAnnotations);
      if (!_unsetProperties.contains(Metadata_Builder.Property.VALUE_TYPE_VISIBILITY)) {
        result.append(", valueTypeVisibility=").append(valueTypeVisibility);
      }
      return result.append(", nestedClasses=").append(nestedClasses).append("}").toString();
    }
  }
}
